#ifdef    QUEX_OPTION_COMPUTED_GOTOS_DISABLED
#   undef QUEX_OPTION_COMPUTED_GOTOS
#endif
#ifdef    QUEX_OPTION_BUFFER_BASED_ANALYZIS_DISABLED
#   undef QUEX_OPTION_BUFFER_BASED_ANALYZIS
#endif
#ifdef    __QUEX_OPTION_ON_ENTRY_HANDLER_PRESENT_DISABLED
#   undef __QUEX_OPTION_ON_ENTRY_HANDLER_PRESENT
#endif
#ifdef    __QUEX_OPTION_ON_EXIT_HANDLER_PRESENT_DISABLED
#   undef __QUEX_OPTION_ON_EXIT_HANDLER_PRESENT
#endif
#ifdef    QUEX_OPTION_CONVERTER_ICONV_DISABLED
#   undef QUEX_OPTION_CONVERTER_ICONV
#endif
#ifdef    QUEX_OPTION_CONVERTER_ICU_DISABLED
#   undef QUEX_OPTION_CONVERTER_ICU
#endif
#ifdef     __QUEX_OPTION_SUPPORT_BEGIN_OF_LINE_PRE_CONDITION_DISABLED
#   undef  __QUEX_OPTION_SUPPORT_BEGIN_OF_LINE_PRE_CONDITION
#endif
#ifdef    QUEX_OPTION_INCLUDE_STACK_DISABLED
#   undef QUEX_OPTION_INCLUDE_STACK
#endif
#ifdef    QUEX_OPTION_STRING_ACCUMULATOR_DISABLED
#   undef QUEX_OPTION_STRING_ACCUMULATOR
#endif
#ifdef QUEX_OPTION_DEBUG_QUEX_PATTERN_MATCHES_DISABLED
#   undef QUEX_OPTION_DEBUG_QUEX_PATTERN_MATCHES
#endif
#ifdef    QUEX_OPTION_DEBUG_SHOW_MODES_DISABLED
#   undef QUEX_OPTION_DEBUG_SHOW_MODES
#endif
#ifdef    QUEX_OPTION_DEBUG_TOKEN_SENDING_DISABLED
#   undef QUEX_OPTION_DEBUG_TOKEN_SENDING
#endif
#ifndef    QUEX_OPTION_AUTOMATIC_ANALYSIS_CONTINUATION_ON_MODE_CHANGE_DISABLED
#   define QUEX_OPTION_AUTOMATIC_ANALYSIS_CONTINUATION_ON_MODE_CHANGE
#endif
#ifdef    QUEX_OPTION_RUNTIME_MODE_TRANSITION_CHECK_DISABLED
#   undef QUEX_OPTION_RUNTIME_MODE_TRANSITION_CHECK
#endif
#ifdef    QUEX_OPTION_RUNTIME_MODE_TRANSITION_CHECK_DISABLED
#   undef QUEX_OPTION_POST_CATEGORIZER
#endif
#ifdef    QUEX_OPTION_COLUMN_NUMBER_COUNTING_DISABLED
#   undef QUEX_OPTION_COLUMN_NUMBER_COUNTING
#endif
#ifdef    QUEX_OPTION_LINE_NUMBER_COUNTING_DISABLED
#   undef QUEX_OPTION_LINE_NUMBER_COUNTING
#endif

#if  ! defined (QUEX_SETTING_BUFFER_MIN_FALLBACK_N)
#   if ! defined (QUEX_SETTING_BUFFER_SIZE) 
#      error "QUEX_SETTING_BUFFER_SIZE not defined at this place."
    /* If your compiler brings you here to this position, then this may be because
     * you defined the QUEX_SETTING_BUFFER_SIZE with something different than just
     * an integer number. Indeed something like
     *
     *   #define QUEX_SETTING_BUFFER_SIZE  (size_t)4096
     *
     * would be propper, but does not allow to do some math. So, please erase whatever
     * is not a number in the definition (e.g. delete the '(size_t)' type cast.        */
#   elif      QUEX_SETTING_BUFFER_SIZE >= 1024
#      define QUEX_SETTING_BUFFER_MIN_FALLBACK_N  (256)
#   elif      QUEX_SETTING_BUFFER_SIZE >= 16
#      define QUEX_SETTING_BUFFER_MIN_FALLBACK_N  (size_t)(QUEX_SETTING_BUFFER_SIZE >> 5)
#   else
#      define QUEX_SETTING_BUFFER_MIN_FALLBACK_N  (0)
#   endif
#endif

/* Tokens may be 'stamped' with the line an column number automatically.
 * This happens by means of the option 
 *      
 *       QUEX_OPTION_TOKEN_STAMPING_WITH_LINE_AND_COLUMN_DISABLED
 *
 * It is active by default only for queue token policies, because after
 * a call to .receive(), the lexical analyzer maintains only the position
 * of the last token in the queue. The positions of other tokens would
 * not be accessible once they are in the queue. 
 * 
 * The token policy 'users_token' only communicates one token at a time
 * and the line and column numbers in the lexical analyzer are those
 * of the last token. Thus, in this case the tokens do not need to be 
 * stamped with the position in the file.                                */
#ifdef         QUEX_OPTION_TOKEN_STAMPING_WITH_LINE_AND_COLUMN_DISABLED
#    ifdef     QUEX_OPTION_TOKEN_STAMPING_WITH_LINE_AND_COLUMN
#        undef QUEX_OPTION_TOKEN_STAMPING_WITH_LINE_AND_COLUMN
#    endif
#else
#    ifndef    QUEX_OPTION_TOKEN_STAMPING_WITH_LINE_AND_COLUMN
#       define QUEX_OPTION_TOKEN_STAMPING_WITH_LINE_AND_COLUMN
#    endif
#endif

#ifdef  QUEX_OPTION_TOKEN_REPETITION_SUPPORT
#   define __QUEX_IF_TOKEN_REPETITION_SUPPORT(EXPRESSION)          EXPRESSION
#   define __QUEX_IF_TOKEN_REPETITION_SUPPORT_DISABLED(EXPRESSION) /* empty */
#else
#   define __QUEX_IF_TOKEN_REPETITION_SUPPORT(EXPRESSION)          /* empty */
#   define __QUEX_IF_TOKEN_REPETITION_SUPPORT_DISABLED(EXPRESSION) EXPRESSION
#endif

#if defined (QUEX_OPTION_TOKEN_POLICY_QUEUE)
#   define __QUEX_TYPE_ANALYZER_RETURN_VALUE            void
#   define __QUEX_RETURN                                return
#   define QUEX_SETTING_AFTER_SEND_CONTINUE_OR_RETURN() CONTINUE
#else 
#   define __QUEX_TYPE_ANALYZER_RETURN_VALUE            QUEX_TYPE_TOKEN_ID
#   define __QUEX_RETURN                                return __self_result_token_id
#   define QUEX_SETTING_AFTER_SEND_CONTINUE_OR_RETURN() RETURN
#endif

#if defined(QUEX_OPTION_CONVERTER_ICONV) || defined(QUEX_OPTION_CONVERTER_ICU)
#   ifndef    __QUEX_OPTION_CONVERTER
#      define __QUEX_OPTION_CONVERTER
#   endif
#endif
#if ! defined(QUEX_SETTING_BUFFER_FILLERS_CONVERTER_NEW)
#   if   defined (QUEX_OPTION_CONVERTER_ICONV)
#        define  QUEX_SETTING_BUFFER_FILLERS_CONVERTER_NEW  QUEX_NAME(Converter_IConv_new)
#   elif defined (QUEX_OPTION_CONVERTER_ICU)
#        define  QUEX_SETTING_BUFFER_FILLERS_CONVERTER_NEW  QUEX_NAME(Converter_ICU_new)
#   else
#        define  QUEX_SETTING_BUFFER_FILLERS_CONVERTER_NEW  QUEX_NAME(__Converter_EMPTY_new)
#   endif
#endif

#ifndef    __QUEX_OPTION_CONVERTER_HELPER
#   if    defined(QUEX_OPTION_INFORMATIVE_BUFFER_OVERFLOW_MESSAGE) \
       || defined(QUEX_OPTION_CONVERTER_ICU)                       \
       || defined(QUEX_OPTION_CONVERTER_ICONV) 
#   define __QUEX_OPTION_CONVERTER_HELPER
#   endif
#endif

#if defined (QUEX_OPTION_ASSERTS) && ! defined(__QUEX_OPTION_PLAIN_C)
#    define QUEX_TYPE_CHARACTER_POSITION     QUEX_NAME(MemoryPositionMimiker)
#else
#    define QUEX_TYPE_CHARACTER_POSITION     QUEX_TYPE_CHARACTER*
#endif

#if    defined(QUEX_OPTION_LINE_NUMBER_COUNTING)   \
    || defined(QUEX_OPTION_COLUMN_NUMBER_COUNTING) \
    || defined(QUEX_OPTION_INDENTATION_TRIGGER)       
#     define  __QUEX_OPTION_COUNTER
#else
#     if defined(__QUEX_OPTION_COUNTER)  
#        undef   __QUEX_OPTION_COUNTER
#     endif
#endif

#if defined(QUEX_OPTION_LINE_NUMBER_COUNTING)   
#   define     __QUEX_IF_COUNT_LINES(EXPRESSION)      EXPRESSION
#   define     __QUEX_IF_COUNT_LINES_ADD(X)           ((me->counter._line_number_at_end) += (X))
#else
#   define     __QUEX_IF_COUNT_LINES(EXPRESSION)      /* empty */
#   define     __QUEX_IF_COUNT_LINES_ADD(X)           /* empty */
#endif
#if defined(QUEX_OPTION_LINE_NUMBER_COUNTING)   
#   define     __QUEX_IF_COUNT_COLUMNS(EXPRESSION)    EXPRESSION
#   define     __QUEX_IF_COUNT_COLUMNS_SET(X)         ((me->counter._column_number_at_end) = (X))
#   define     __QUEX_IF_COUNT_COLUMNS_ADD(X)         ((me->counter._column_number_at_end) += (X))
#else
#   define     __QUEX_IF_COUNT_COLUMNS(EXPRESSION)    /* empty */
#   define     __QUEX_IF_COUNT_COLUMNS_SET(X)         /* empty */
#   define     __QUEX_IF_COUNT_COLUMNS_ADD(X)         /* empty */
#endif
#if defined(QUEX_OPTION_INDENTATION_TRIGGER)
#   ifndef    QUEX_OPTION_INDENTATION_DEFAULT_HANDLER_DISABLED
#      define QUEX_OPTION_INDENTATION_DEFAULT_HANDLER
#   endif
#   define    __QUEX_IF_COUNT_INDENTATION(EXPRESSION) EXPRESSION
#else
#   define    __QUEX_IF_COUNT_INDENTATION(EXPRESSION) /* empty */
#endif

/* Special Case MinGW: At the time of this writing (2009y09m23d) it does 
 * not support 'wchart_t'.                                                */
#if      (defined (__GLIBCPP__) || defined(__GLIBCXX__)) \
    && ! defined  (_GLIBCXX_USE_WCHAR_T)
#   define  __QUEX_OPTION_WCHAR_T_DISABLED
#endif
#ifndef     __QUEX_OPTION_WCHAR_T_DISABLED
#   define  __QUEX_OPTION_WCHAR_T
#endif

/* If you have a different setup, define the macros QUEX_SETTING_WCHAR_CODEC
 * and QUEX_SETTING_CHAR_CODEC before the inclusion of this file.
 *
 * NOTE: '8' stands for UTF8, '16' stands for UTF16, and '32' for UTF32.
 *       Do not add anything around those numbers, otherwise the macros
 *       will not trigger the right mappings.                             */
#if ! defined(QUEX_SETTING_WCHAR_CODEC)
#   if defined(_WIN32) || defined(_WIN64)
       /* Default: Map 'wchar' to 'utf16' */
#      define QUEX_SETTING_WCHAR_CODEC  16
#   else
       /* Default: Map 'wchar' to 'utf32' */
#      define QUEX_SETTING_WCHAR_CODEC  32
#   endif
#endif

/* Default: Map 'char' to 'utf8' */
#if ! defined(QUEX_SETTING_CHAR_CODEC)
#   define    QUEX_SETTING_CHAR_CODEC   8
#endif

#define ____QUEX_CONVERTER_CHAR(FROM, TO)    QUEX_NAME(FROM ## _to_ ## TO ## _character)
#define __QUEX_CONVERTER_CHAR(FROM, TO)      ____QUEX_CONVERTER_CHAR(FROM, TO)
#define ____QUEX_CONVERTER_STRING(FROM, TO)  QUEX_NAME(FROM ## _to_ ## TO)
#define __QUEX_CONVERTER_STRING(FROM, TO)    ____QUEX_CONVERTER_STRING(FROM, TO)
 
